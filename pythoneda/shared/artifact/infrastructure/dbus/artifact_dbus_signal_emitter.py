"""
pythoneda/shared/artifact/infrastructure/dbus/artifact_dbus_signal_emitter.py

This file defines the ArtifactDbusSignalEmitter class.

Copyright (C) 2023-today rydnr's pythoneda-shared-artifact/infrastructure

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import abc
from dbus_next import BusType
from pythoneda import Event
from pythoneda.infrastructure.dbus import DbusSignalEmitter
from pythoneda.shared.artifact.events import (
    CommittedChangesPushed,
    CommittedChangesTagged,
    StagedChangesCommitted,
    TagPushed,
)
from pythoneda.shared.artifact.events.infrastructure.dbus import (
    DbusCommittedChangesPushed,
    DbusCommittedChangesTagged,
    DbusStagedChangesCommitted,
    DbusTagPushed,
)
from typing import Dict


class ArtifactDbusSignalEmitter(DbusSignalEmitter, abc.ABC):

    """
    A Port that emits events generated by Domain-Artifact as d-bus signals.

    Class name: ArtifactDbusSignalEmitter

    Responsibilities:
        - Connect to d-bus.
        - Emit domain events as d-bus signals.

    Collaborators:
        - pythoneda.application.PythonEDA: Requests emitting events.
        - pythoneda.shared.artifact.events.infrastructure.dbus.DbusCommittedChangesPushed
    """

    def __init__(self):
        """
        Creates a new ArtifactDbusSignalEmitter instance.
        """
        super().__init__()

    def signal_emitters(self) -> Dict:
        """
        Retrieves the configured event emitters.
        :return: For each event, a list with the event interface and the bus type.
        :rtype: Dict
        """
        result = {}

        key = self.__class__.full_class_name(CommittedChangesPushed)
        result[key] = [DbusCommittedChangesPushed, BusType.SYSTEM]
        key = self.__class__.full_class_name(CommittedChangesTagged)
        result[key] = [DbusCommittedChangesTagged, BusType.SYSTEM]
        key = self.__class__.full_class_name(StagedChangesCommitted)
        result[key] = [DbusStagedChangesCommitted, BusType.SYSTEM]
        key = self.__class__.full_class_name(TagPushed)
        result[key] = [DbusTagPushed, BusType.SYSTEM]

        return result
